===Java Learning==
==Date:31-Jul-2021==
1. It was created by Sun Microsystem
2. James gospplin

##Java program run overview:
<FileName>.java ---> Compiler(ByteCode/<FileName.class>)-->JVM (Application will run on JVM to generate o/p)

##S/W needed:
1. Editor --> (Notepad, IDEs)	
2. Compiler --> (javac)		|==> JDK 1.8			
3. Run time env --> (JVM)	|	

IDE (Integrated Development Env.):
==================================
1.Eclipse
2.Netbeans

====================================================================================================================
##FirstCode:
============
calss FirstCode

//Java says everything should be in calss
//class name should be same as the file it is a standard approach 
//it can be differen also, but if we difine a class as public then we have keep the file name and class name as same

{
	public void main(String a[]) 
	//main () method is a default method in java, 
	//here it takes an argument as String a[] (array), 
	//it returns null value so 'void', 
	//methods are 2 types static (belongs to class) & non-static (belongs to object), 
	//access from every where so we added "public"
	{
		System.out.print("Hello"); //"print" is a method belongs to "out" object and out belongs to "System" calss.
	
	}	
}

-- open command prompt to run the code
-- go to directory where we have saved the java file (if it is not c drive then just type d: and enter it will change the dir)
-- then type javac , it says not recognized then set the path by using below command.
C:\Working_Directory\Java_Programs>set path="C:\Program Files\Java\jdk1.8.0_301\bin"

-- Compile: javac FirstCode.java --> it compiles the code and generates the FirstCode.class byte code file.
-- To run: java FirstCode --> it runs the class file and gives the o/p as Hello!!

====================================================================================================================
Variable:
=========
-- Variable is a container where we can store the data
e.g. storing a Mobile phone  in (XXHeadPhone cover, **Mobile cover,**Laptop Cover)

--
DataType	keyword	size (bit (2 bytes = 1 bit))
------------------------------------------------
byte 		byte	8	1 bytes
Character 	char 	16	2 bytes
short 		short	16	2 bytes
integer 	int		32	4 bytes
float		float	32	4 bytes
long		long	64	8 bytes
double 		double	64	8 bytes
boolean		boolean	NA (false/true)

int i = 5 --> data
|	|
|	variable
Datatype

** storing smaller value into bigger Datatype is possible with out any data loss
** Storing bigger data value into smaller datatype is possible but data will be lost.
int i = 5.5 ==> result: 5


====================================================================================================================
## Add:
========
class Add

//Java says everything should be in calss
//class name should be same as the file it is a standard approach (it can be differen also)
{
	public static void main(String a[]) 
	//main () method is a default method in java, 
	//here it takes an argument as String a[] (array), 
	//it returns null value so 'void', 
	//methods are 2 types static (belongs to class) & non-static (belongs to object), 
	//access from every where so we added "public"
	{	
		int num1=6;
		int num2=3;
		num2=5;
		
		//float num3=6.4; this will give error as in Java by default all the real numbers (Decimal numbers) are of double type.
		//float num4=3.3;
		
		double num3=6.4;
		double num4=3.3;
		
		float num5=6.4f;
		float num6=3.3f;
		System.out.print("INT Additon:");
		System.out.print(num1+num2); //"print" is a method belongs to "out" object and out belongs to "System" calss.
		System.out.println("\n");
		System.out.print("Double Additon:");
		System.out.print(num3+num4);
		System.out.println("\n");
		System.out.print("Float Additon:");
		System.out.print(num5+num6);
	
	}	
}

o/p:
INT Additon:11

Double Additon:9.7

Float Additon:9.7

** double will take 8bytes for same result where as float will take only 4bytes

====================================================================================================================
## AsciiValue:
==============
class AsciiValue

//Java says everything should be in calss
//class name should be same as the file it is a standard approach (it can be differen also)
{
	public static void main(String a[]) 
	//main () method is a default method in java, 
	//here it takes an argument as String a[] (array), 
	//it returns null value so 'void', 
	//methods are 2 types static (belongs to class) & non-static (belongs to object), 
	//access from every where so we added "public"
	{	
		char e='A';
		char b='a';
		char c='?';
		
		System.out.println("ASCII value of A:");
		System.out.print((int)e); //"print" is a method belongs to "out" object and out belongs to "System" calss.
		System.out.println("\n");
		System.out.println("ASCII value of a:");
		System.out.print((int)b);
		System.out.println("\n");
		System.out.println("ASCII value of ?:");
		System.out.print((int)c);
		System.out.println("\n");
		
		System.out.println("ASCII to Char:");
		System.out.print((char)65);
		System.out.println("\n");
		System.out.println("ASCII to Char:");
		System.out.print((char)97);
		System.out.println("\n");
		System.out.println("ASCII to Char:");
		System.out.print((char)63);
	
	}	
}


o/p:
ASCII value of A:
65

ASCII value of a:
97

ASCII value of ?:
63

ASCII to Char:
A

ASCII to Char:
a

ASCII to Char:
?

====================================================================================================================
##Naming Convention:
=====================
Variable name: 
--should be meaning full name 
--it should be in lowercase
e.g. sname (student name), stockprice (Stock price)

Class name (noun): 
--should be meaning full name 
--it should be in (CamelCase) starting with an upper case for eachword
e.g. Student (student class), Stock (Stock class), HashMap (Hash Map class)


Inerface name (Adjective): 
--should be meaning full name 
--it should be starting with an upper case
e.g. Runable,Readable,Remote

Method (verb): 
--should be meaning full name 
--it should be starting with a lower case and the further words should start with upper case.
e.g. actionPerformed,run,print,write

Constant:
--should be meaning full name 
--it should be all in upper case the words should be sepearated with '_' (SNAKE_CASE)
e.g. PI, DENSITY,AREA,MAX_PRICE

Constructor:
Abc() -- class name with () abc()--> method.

====================================================================================================================
##PrintfPrintln
=====================

public class PrintfPrintln {

	public static void main(String[] args) {
		
		int i,j,k;
		i=5;
		j=4;
		k=i+j;
		
		System.out.println("The addition of "+i+" and "+j+" is :"+k); // the return type of println()is string
		System.out.printf("The addition of %d and %d is: %d",i,j,k); // the return type of printf() is a format.
		

	}

}

o/p:
The addition of 5 and 4 is :9
The addition of 5 and 4 is: 9

====================================================================================================================
##Shorthand operator
=====================
public class ShorthandOperator {

	public static void main(String[] args) {
		
		int i=5;
		int j=5;
		i = i+2;
		j += 2;
		
		byte k=5;
		//k=k+2.5; //Type mismatch can not covert double value to byte
		k+=2.5; //However in shorthand it is working because in shorthand operator it always takes the data type of the first variable E1 op E2= E1 type 
		
		System.out.println("The value of i+2 is:" +i);
		System.out.println("The value of j+=2 is:" +j);
		
		System.out.println("The value of k+=2.5 is:" +k);// returns byte type result

	}

}

o/p:
The value of i+2 is:7
The value of j+=2 is:7
The value of k+=2.5 is:7

====================================================================================================================
##Binary to number
=====================
public class BinaryToNumber {

	public static void main(String[] args) {
		int i=0b100_00_00_00_00; // we can use 0b/0B to covert a binary code to int
		
		System.out.println("The value of i is:" +i );

	}

}

o/p:
The value of i is:1024

====================================================================================================================
##Pre and Post increment
=========================

public class PrePostIncrement {

	public static void main(String[] args) {
		int i=5;
		i= i+1; 
				
		int k=5;
		k=++k; //Pre increment: First increment then assignment
		
		int l,m,n,o;
		l=5;
		m=++l;
		
		n=5;
		o=n++;
		
		int j=5;
		j= j++; //Post increment: Assignment first then increment
		
		
		/*int temp;
		temp=j;
		j++;
		j=temp;*/
		
		System.out.println("The value of i is: "+i);
		System.out.println("The value of k is: "+k);
		System.out.println("The value of l is: "+l);
		System.out.println("The value of m is: "+m);
		System.out.println("The value of n is: "+n);
		System.out.println("The value of o is: "+o);
		System.out.println("The value of j is: "+j);

	}

}

o/p:
The value of i is: 6
The value of k is: 6
The value of l is: 6
The value of m is: 6
The value of n is: 6
The value of o is: 5
The value of j is: 5

====================================================================================================================
##Bitwise And (&) Or (|) operator
==================================

public class BitwiseAndOr {

	public static void main(String[] args) {
		//Bitwise AND --> &
		//1 & 1 -->1 else 0
		
		//Bitwise OR --> |
		//0 | 0 -->0 else 1
		
		int a=25; //11001
		int b=15; //01111
		
		int c=a&b; //00001
		int d=a|b; //11111
		
		System.out.println("a & b: " +c+ "\n"+"a |b: "+d);

	}

}


o/p:
a & b: 9
a |b: 31

==Date:01-Aug-2021==
====================================================================================================================
##Left shift (<<) and Right shift (>>) operator
===============================================

public class LeftRightShiftOperator {

	public static void main(String[] args) {
		int a = 25; //11001
		int b= a << 2; //001 (left (<<) shift by 2 bytes)
		int c= a >> 2; //110 (Right (>>) shift by 2 bytes)
		
		System.out.println("Left shift a value is: "+b);
		System.out.println("Right shift a value is: "+c);

	}

}

o/p:
Left shift a value is: 100
Right shift a value is: 6

====================================================================================================================
Boolean (Class) boolean (premetive datatype)
===============================================

public class BooleanDatatype {

	public static void main(String[] args) {
		//Boolean is a class
		//boolean is a permeative data type
		
		boolean a=true;
		boolean b=!a;
		
		System.out.println("Value of a: "+a);
		System.out.println("Value of b: "+b);

	}

}


o/p:
Value of a: true
Value of b: false

====================================================================================================================
IfElse condition
===============================================

public class IfElseLogic {

	public static void main(String[] args) {
		int num1=5;
		
		if (num1%2==0)
		{
			System.out.println("num1 is Even");
		}
		else {
			System.out.println("num1 is Odd");
		}
		
		int a,b,c;
		a=5;
		b=3;
		c=13;
		
		if(a>b && a>c)
		{
			System.out.println("a is greatest number");
		}
		else if(b>c)
		{
			System.out.println("b is greatest number");
		}
		else
		{
			System.out.println("c is greatest number");
		}

	}

}

o/p:
num1 is Odd
c is greatest number

====================================================================================================================
Ternary Operator (?:)
===============================================
import com.sun.org.apache.bcel.internal.generic.NEW;

public class TernaryOperator {

	public static void main(String[] args) {
		//Ternary operator ((condition)?(true value):(else false value))
		//Ternary operator is the replace of If Else logic but it will always returns the biggest data type value in case of Object type variables.
		
		int a=1;
		int b=5;
		
//		if(a==1) 
//		{
//			++b;
//			System.out.println("Value of b is: "+b);
//		}
//		else {
//			System.out.println("Value fo b is: "+b);
//		}
		
		//Same above code in Ternary operator
		
		b=a==1?++b:b;
		System.out.println("Value fo b is: "+b);
		
		//Ternary operator is the replace of If Else logic but it will always returns the biggest data type value in case of Object type variables.
		
		Object obj1;
		Object obj2;
		
		if(true) {
			obj1= new Integer(10);
			
		}
		else {
			obj1= new Double(15.0);
		}
		
		System.out.println("Vlue of obj1: "+obj1);
		
		obj2=true?new Integer(10):new Double(15.0);
		System.out.println("Vlue of obj2: "+obj2);

	}

}

o/p:
Value fo b is: 6
Vlue of obj1: 10
Vlue of obj2: 10.0

====================================================================================================================
Java tirck (printf with out semicolon)
===============================================
public class PrintWOSemicolon {

	public static void main(String[] args) {
		if(System.out.printf("Hello World!!")==null) {
			
		}

	}

}

o/p:
Hello World!!

====================================================================================================================
Switch Case statement
===============================================

public class SwitchCase {

	public static void main(String[] args) {
		int i=1;
		
	switch(i) {
	case 1:
		System.out.println("One");
		break;
		
	case 2:
		System.out.println("Two");
		break;
		
	case 3:
		System.out.println("Three");
		break;
		
	case 4:
		System.out.println("Four");
		break;
		
	default:
		System.out.println("Some Number");
		break;
		
	}

	}

}

o/p:
One

====================================================================================================================
Loops:
===============================================

public class Loops {

	public static void main(String[] args) {
		int i=1;
		
		//While loop: always checks for true condition
		System.out.println("While Loop:");
		
		while(i<=10) {
			System.out.println(i);
			i++; //post increment
		}
		
		//do{} while(condition): First evaluates the block and then checks for the condition

		int j=15;
		
		System.out.println("Do While Loop:");
		
		do {
			System.out.println(j);
			j++; //post increment
		} while (j<=10);
		
		//For loop: here we initialize the value, increment and check condition in one row itself.
		
						
		System.out.println("For Loop:");
				
			for(int k=1;k<=10;k++) {
				
				System.out.println(k);
					
			}
	}

}

o/p:
While Loop:
1
2
3
4
5
6
7
8
9
10
Do While Loop:
15
For Loop:
1
2
3
4
5
6
7
8
9
10

====================================================================================================================
Labeled/Un-labeled break:
===============================================
public class LabeledUnLabledBreak {

	public static void main(String[] args) {
		
		System.out.println("With out break:");
		
		for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=4;j++)
			{
				System.out.print("* "); // we used System.out.print to print in one line
			}
			System.out.println("");
		}
		
	System.out.println("With Unlabeled break:");
		
		for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=4;j++)
			{
				if (i==3)
					break;//Unlabeled break: it will only break inner loop as we have not defined any label
				System.out.print("* "); // we used System.out.print to print in one line
			}
			System.out.println("");
		}
		
	System.out.println("With Labeled break:");
		
	OuterLoop:
		for(int i=1;i<=4;i++)
		{
			InnerLoop:
			for(int j=1;j<=4;j++)
			{
				if (i==3)
					break OuterLoop;//labeled break: it will outer loop as we have defined OutterLoop label
				System.out.print("* "); // we used System.out.print to print in one line
			}
			System.out.println("");
		}
		

	}

}

o/p:
With out break:
* * * * 
* * * * 
* * * * 
* * * * 
With Unlabeled break:
* * * * 
* * * * 

* * * * 
With Labeled break:
* * * * 
* * * * 

====================================================================================================================
ASCII to Actual value:
===============================================

public class ASCIIToActual {

	public static void main(String[] args) {
		//ASCII: American Standard Code for Information Interchange
		//7bits
		//2^7=128 ==> 0-127
		
		for(int i=0;i<=127;i++) {
			
			System.out.printf("%d : %c \n",i,i);
		}

	}

}


o/p:
0 :
1 :  
2 :  
3 :  
4 :  
5 :  
6 :  
7 :  
8 :  
9 : 	 
10 : 
 
11 :  
12 :  
13 : 
 
14 :  
15 :  
16 :  
17 :  
18 :  
19 :  
20 :  
21 :  
22 :  
23 :  
24 :  
25 :  
26 :  
27 :  
28 :  
29 :  
30 :  
31 :  
32 :   
33 : ! 
34 : " 
35 : # 
36 : $ 
37 : % 
38 : & 
39 : ' 
40 : ( 
41 : ) 
42 : * 
43 : + 
44 : , 
45 : - 
46 : . 
47 : / 
48 : 0 
49 : 1 
50 : 2 
51 : 3 
52 : 4 
53 : 5 
54 : 6 
55 : 7 
56 : 8 
57 : 9 
58 : : 
59 : ; 
60 : < 
61 : = 
62 : > 
63 : ? 
64 : @ 
65 : A 
66 : B 
67 : C 
68 : D 
69 : E 
70 : F 
71 : G 
72 : H 
73 : I 
74 : J 
75 : K 
76 : L 
77 : M 
78 : N 
79 : O 
80 : P 
81 : Q 
82 : R 
83 : S 
84 : T 
85 : U 
86 : V 
87 : W 
88 : X 
89 : Y 
90 : Z 
91 : [ 
92 : \ 
93 : ] 
94 : ^ 
95 : _ 
96 : ` 
97 : a 
98 : b 
99 : c 
100 : d 
101 : e 
102 : f 
103 : g 
104 : h 
105 : i 
106 : j 
107 : k 
108 : l 
109 : m 
110 : n 
111 : o 
112 : p 
113 : q 
114 : r 
115 : s 
116 : t 
117 : u 
118 : v 
119 : w 
120 : x 
121 : y 
122 : z 
123 : { 
124 : | 
125 : } 
126 : ~
127 :  

====================================================================================================================
PrintPatterns:
===============================================
public class PrintPatterns {

	public static void main(String[] args) {
		/*
		 * * * *
		 * * * *
		 * * * *
		 * * * *
		 */
		
		for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=4;j++)
			{
				System.out.print("* "); // we used System.out.print to print in one line
			}
			System.out.println("");
		}
		
		System.out.println("===============================");
		
		/*
		 * 
		 * * 
		 * * * 
		 * * * *
		 */
		
		for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=i;j++)
			{
				System.out.print("* "); // we used System.out.print to print in one line
			}
			System.out.println("");
		}
		
System.out.println("===============================");
		
		/*
		 * * * *
		 *     *
		 *     *
		 * * * *
		 */
		
		for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=4;j++)
			{
				
				if(i==1||i==4||j==1||j==4){
				System.out.print("* "); // we used System.out.print to print in one line
				}
				else {
					
					System.out.print("  ");
				}
				
				}
			System.out.println("");
		}
System.out.println("===============================");
		
		/*
		 1 2 3 4
		 1 2 3 4
		 1 2 3 4
		 1 2 3 4
		 */		
	for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=4;j++)
				{
					System.out.print(j+" "); // we used System.out.print to print in one line
				}
			System.out.println("");
		}

System.out.println("===============================");

/*
 1 1 1 1
 2 2 2 2
 3 3 3 3
 4 4 4 4
 */		
	for(int i=1;i<=4;i++)
		{
			for(int j=1;j<=4;j++)
				{
					System.out.print(i+" "); // we used System.out.print to print in one line
				}
			System.out.println("");
		}
	
System.out.println("===============================");

	/*
	 1 2 3 4
	 2 3 4 1
	 3 4 1 2
	 4 1 2 3
	 */		
		for(int i=1;i<=4;i++)
			{
				for(int j=1;j<=4;j++)
					{
						int k=i+j-1;
						
						if(k>4)
						{
						System.out.print(k -4 +" "); // we used System.out.print to print in one line
						}
						else {
							System.out.print(k+ " ");
						}
					}
				System.out.println("");
			}
		System.out.println("===============================");

		/*
		 		j
			i	1 2 3 4 5
			1  	1
			2  	0 1
			3  	1 0 1
			4  	0 1 0 1
			5  	1 0 1 0 1
		 */
		
		for (int i=1;i<=5;i++){

			if(i%2!=0){
			
				for (int j=1;j<=i;j++)
					
					if(j%2!=0){
						System.out.print("1 ");
					}
					else if (j%2==0)
					{
						System.out.print("0 ");
					}
				}

			else {
				for (int j=1;j<=i;j++)
				{
					if(j%2!=0){
						System.out.print("0 ");
					}
					else if (j%2==0)
					{
						System.out.print("1 ");
					}
				}
			}
			System.out.println("");
		}
		
		System.out.println("===============================");
		/*
 		j
	i	1 2 3 4 5
	1  	1
	2  	0 1
	3  	1 0 1
	4  	0 1 0 1
	5  	1 0 1 0 1
 */

		for (int i=1;i<=5;i++){
		
		
				for (int j=1;j<=i;j++) {
					
					if((i+j)%2!=0){
						System.out.print("0 ");
					}
					else if ((i+j)%2==0)
					{
						System.out.print("1 ");
					}
				}
		
			
			System.out.println("");
		}
		
System.out.println("===============================");
		/*
 		j
	i	1 2 3 4 5
	1  	1
	2  	2 2
	3  	3 3 3
	4  	4 4 4 4
	5  	5 5 5 5 5
 */

		for (int i=1;i<=5;i++){
		
		
				for (int j=1;j<=i;j++) {
					
					
						System.out.print(i+" ");
					
				}
		
			
			System.out.println("");
		}
		

	}

}



o/p:
* * * * 
* * * * 
* * * * 
* * * * 
===============================
* 
* * 
* * * 
* * * * 
===============================
* * * * 
*     * 
*     * 
* * * * 
===============================
1 2 3 4 
1 2 3 4 
1 2 3 4 
1 2 3 4 
===============================
1 1 1 1 
2 2 2 2 
3 3 3 3 
4 4 4 4 
===============================
1 2 3 4 
2 3 4 1 
3 4 1 2 
4 1 2 3 
===============================
1 
0 1 
1 0 1 
0 1 0 1 
1 0 1 0 1 
===============================
1 
0 1 
1 0 1 
0 1 0 1 
1 0 1 0 1 
===============================
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 




====================================================================================================================
Fibonacci Series:
====================
//1 1 2 3 5 8 ... n

import java.util.Scanner;

public class FibonacciSeries {

	
	public static void main(String[] args) {
		int k,a,b;
		k=0;
		a=1;
		b=1;
		
		Scanner sc= new Scanner(System.in);
		System.out.println("Enter a valid number:");
		int n= sc.nextInt();
				
		System.out.print("1 1 ");
		
		while(k<=n) {
			
			k=a+b;
			System.out.print(k + " ");
			a=b;
			b=k;
		}
		System.out.println("");
		System.out.println("Completed!!");
		

	}

}


o/p:
Enter a valid number:
1000
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 
Completed!!


====================================================================================================================
Palindrome Nuber:
====================
//121
//121 revrse order should same as the actual number
//123 ==> 321 is not a palindrome.


import java.util.Scanner;

public class PalindromeNumber {

	public static void main(String[] args) {
		int n,r,s=0,t;
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter a Value to check the Number is Palindrome or not:");
		n=sc.nextInt();
		
		t=n;
		
		/*
		 * n(Actual)	r(reminder)		s(Reverse number)
		 * 1221			1					1
		 * 122			2					12
		 * 12			2					122
		 * 1			1					1221
		 * 0 (out of the loop)
		 */
		
		while(n>0)
		{
			r=n%10;
			n=n/10;
			s=(s*10)+r;
		}
		
		System.out.println("The Value of s is: "+s);
		
		if(s==t) {
			System.out.println(s + " is a Palindrome");
		}
		
		else {
			System.out.println(s + " is not a Palindrome");
		}
		

	}

}


o/p:
Enter a Value to check the Number is Palindrome or not:
1221
The Value of s is: 1221
1221 is a Palindrome

====================================================================================================================
Perfect Number:
====================
//Perfect Number: If we add the factorials (n%i==0) of a given number and if the sum result matches with the acual number then it is a perfect number.
//E.g. 6: 1+2+3 =6 similarly 28: 1+2+4+7+14=28

import java.util.Scanner;

public class PerfectNumber {

	public static void main(String[] args) {
		int n,sum=0;
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter a number to know whether it is a Perfect Number or not:");
		n=sc.nextInt();
		
		for(int i=1;i<=(n/2);i++) {
			if(n%i==0)
			sum=sum+i;
			}
		System.out.println("The Value of sum is: "+sum);
		
		if(sum==n)
			System.out.println(n+" is a Perfect number");
		else 
			System.out.println(n+" is not a Perfect number");
		

	}

}


o/p:
Enter a number to know whether it is a Perfect Number or not:
6
The Value of sum is: 6
6 is a Perfect number

====================================================================================================================
Armstrong Number:
====================
//Armstrong Number: if sum up the qube value of each digit of number and if it matches with the actual number then it is an Armstrong Number
//E.g. 153 ==> 1^3+5^3+3^3 ==> 1+125+27 ==153

import java.util.Scanner;

public class ArmstrongNumber {

	public static void main(String[] args) {
		//Armstrong Number: if sum up the qube value of each digit of number and if it matches with the actual number then it is an Armstrong Number
		//E.g. 153 ==> 1^3+5^3+3^3 ==> 1+125+27 =153
		
		int n,r,s=0,t;
		
		Scanner sc= new Scanner(System.in);
		System.out.println("Enter a valid number to know whether it is an Armstrong Number or not:");
		n=sc.nextInt();
		
		t=n;
		
		while(n>0) {
			
			r=n%10;
			n=n/10;
			s=s+(r*r*r);
			
		}
		
		System.out.println("The sum value is: "+s);
		
		if(t==s)
			System.out.println(t+ " is an Armstrong Number!");
		else 
			System.out.println(t+ " is not an Armstrong Number!");
		

	}

}

o/p:
Enter a valid number to know whether it is an Armstrong Number or not:
153
The sum value is: 153
153 is an Armstrong Number!

====================================================================================================================
Prime Number:
====================
//Here we have created a public static method to check the Prime number.
//We defined the method as public out side main and called it inside the main method.

import java.util.Scanner;

public class PrimeNumber {

	public static void main(String[] args) {
		// Prime Number: The number which is divided by itself or 1.
		//E.g. 3 5
		
		int n=0;
		boolean b= isPrimeNumber(n);
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter a valid number to know whether it is a Prime Number or not:");
		n=sc.nextInt();
				
		if(b)
			System.out.println(n+ " is a Prime number");
		else 
			System.out.println(n+ " is not a Prime number");
	}
		
	public static boolean isPrimeNumber(int n) 
	{
		
		for (int i=2;i<n;i++) {
			
			if(n%i==0) 
				return false;
			break;
				}
		return true;
	}
		
			

	

}

o/p:
Enter a valid number to know whether it is a Prime Number or not:
3
3 is a Prime number

====================================================================================================================
Number Swap:
====================

public class SwapNumber {

	public static void main(String[] args) {
		//Swap using temp variable
		//it consumes 4 bit extra memory
		int a=5,b=4,temp;
		
		temp=a;
		a=b;
		b=temp;
		
		System.out.println("The value of a is: "+a);
		System.out.println("The value of b is: "+b);
		
		//Swap using sum and minus operation, this also consumes extra memory during sum and minus operation.
		
		int i=5; //--101
		int j=4; //--100
		
		i=i+j; //a=9 -->1001 --> 4bits
		j=i-j;
		i=i-j;
		
		System.out.println("===================================");
		System.out.println("The value of i is: "+i);
		System.out.println("The value of j is: "+j);
		
		//Swap using XOR operator (^)
		//This approach will not consume any extra memory.
		
		int m=5; //--101
		int n=4; //--100
		
		//XOR: if( 1 1-->0|| 0 0-->0) else 1
		
		m=m^n;// 1 0 1 ^ 1 0 0 ==>0 0 1
		n=m^n;// 0 0 1 ^ 1 0 0 ==>1 0 1 ==>5
		m=m^n;// 0 0 1 ^ 1 0 1 ==>1 0 0 ==>4
		
		System.out.println("===================================");
		System.out.println("The value of m is: "+m);
		System.out.println("The value of n is: "+n);
		
		//Swap using Arithmatic operation (new way)
		//This approach will not consume any extra memory.
		
		int o=5;
		int p=4;
		
		p= o+p-(o=p);// here first we are evaluating the bracket part whre we assinged p value to o ==>4 and then we substracted the 4 from (o+p)-4.
		
		System.out.println("===================================");
		System.out.println("The value of o is: "+o);
		System.out.println("The value of p is: "+p);

	}

}


The value of a is: 4
The value of b is: 5
===================================
The value of i is: 4
The value of j is: 5
===================================
The value of m is: 4
The value of n is: 5
===================================
The value of o is: 4
The value of p is: 5

====================================================================================================================
Arrays:
====================
//1. Array is a collectin of element.
//2. it is of verious types.
//	*Single dimension array a[0,1,2,3] => its array a of size 4
//	*Multi dimenssional array ==> its called as array arrays
//-->j	  0 1 2 3  |
//-->i	0[0,1,2,3] |
//		1[0,1,2,3] |==> 2-Dimension Array e.g. a[0][0]=0, a[0][1]=1
//		2[0,1,2,3] |
//		3[0,1,2,3] |
//  *We have 3 dimension array also: a[0][1][2] 
// 	*Jagged Array: its a multidimension array with verios size of arrays.
//		0[0,1] 
//		1[0,1,2] 
//		2[0,1,2,3] 
//		3[0,1,2,3,4] 


public class Arrays {

	public static void main(String[] args) {
		
		int a[]=new int[5];//here array is not a variable its a object so we used new keyword to initialize the object. 
		//Values:	1 2 3 4 5
		//indexes:	0 1 2 3 4
		
		a[0]=1;
		a[1]=2;
		a[2]=3;
		a[3]=4;
		a[4]=5;
		
		for(int i=0;i<a.length;i++)
		{
			System.out.println(a[i]);
		}
		

	}

}

====================================================================================================================
Enhanced for loop (for each loop):
==================================

public class EnhancedForLoop {

	public static void main(String[] args) {
		
		int a[]=new int[5];//here array is not a variable its a object so we used new keyword to initialize the object. 
		//Values:	1 2 3 4 5
		//indexes:	0 1 2 3 4
		
//		a[0]=1;
//		a[1]=2;
//		a[2]=3;
//		a[3]=4;
//		a[4]=5;
		
		for(int i=0;i<a.length;i++) {
			a[i]=i+1;
			
		}

		//below is the normal for loop to fetch the array values.
		//this is useful if we want to select a defined part of an array.
		//if we want to fetch the entire array value then we should use enhanced for loop instead of regular for loop.
//		for(int i=0;i<a.length;i++)
//		{
//			System.out.println(a[i]);
//		}
		
		System.out.println("===Enhanced For Loop===");
		
		//Here int j is not the index value it is the array value.
		for(int j : a)
			System.out.println("The value of j is: "+j);
		

	}

}


o/p:
===Enhanced For Loop===
The value of j is: 1
The value of j is: 2
The value of j is: 3
The value of j is: 4
The value of j is: 5


====================================================================================================================
Print Random value:
==================================
//Random is class which is available in java.util
//it is used to print the random values.

import java.util.Random;

public class PrintRandomNumbers {

	public static void main(String[] args) {
		int a[]=new int[20];//here array is not a variable its a object so we used new keyword to initialize the object. 
		//Values:	1 2 3 4 5
		//indexes:	0 1 2 3 4
		
		Random r=new Random();
		
		for(int i=0;i<a.length;i++) {
			a[i]=r.nextInt(50); //r.nextInt(Boundary value==> 50) so it will print the values from 0 to 50
			
		}

		//below is the normal for loop to fetch the array values.
		//this is useful if we want to select a defined part of an array.
		//if we want to fetch the entire array value then we should use enhanced for loop instead of regular for loop.
//		for(int i=0;i<a.length;i++)
//		{
//			System.out.println(a[i]);
//		}
		
		System.out.println("===Enhanced For Loop===");
		
		for(int j : a)
			System.out.println("The value of j is: "+j);
		


	}

}


o/p:
===Enhanced For Loop===
The value of j is: 15
The value of j is: 4
The value of j is: 5
The value of j is: 17
The value of j is: 1
The value of j is: 37
The value of j is: 33
The value of j is: 8
The value of j is: 23
The value of j is: 22
The value of j is: 6
The value of j is: 16
The value of j is: 24
The value of j is: 31
The value of j is: 32
The value of j is: 10
The value of j is: 19
The value of j is: 12
The value of j is: 27
The value of j is: 23

====================================================================================================================
Array Error Handling:
==================================
//ArrayIndexOutOfBoundsException: This exception will arise if we try to fetch the vlue or insert the value which beyond the array size.
//if we don't handle the exception then the code will not run and will not give any partial resultset.
//if we handle it by using try catch block then the code will run will raise the exception message.

import java.util.Random;

public class ArrayEexceptionHandling {

	public static void main(String[] args) {
		
		int a[]=new int[50];//here array is not a variable its a object so we used new keyword to initialize the object. 
		//Values:	1 2 3 4 5
		//indexes:	0 1 2 3 4
		
		Random r=new Random();
		
		for(int i=0;i<a.length;i++) {
			a[i]=r.nextInt(50); //r.nextInt(Boundary value==> 50) so it will print the values from 0 to 50
			
		}

		//below is the normal for loop to fetch the array values.
		//this is useful if we want to select a defined part of an array.
		//if we want to fetch the entire array value then we should use enhanced for loop instead of regular for loop.
//		for(int i=0;i<a.length;i++)
//		{
//			System.out.println(a[i]);
//		}
		
		//to print an array value
		System.out.println("The array requested array value is: "+ a[52]);//out of bound value
		
		System.out.println("===Enhanced For Loop===");
		
		for(int j : a)
			System.out.println("The value of j is: "+j);

	}

}




o/p:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 52 out of bounds for length 50
	at ArrayEexceptionHandling.main(ArrayEexceptionHandling.java:27)

//This is un-checked exception message

import java.util.Random;

public class ArrayEexceptionHandling {

	public static void main(String[] args) {
		
		int a[]=new int[50];//here array is not a variable its a object so we used new keyword to initialize the object. 
		//Values:	1 2 3 4 5
		//indexes:	0 1 2 3 4
		
		Random r=new Random();
		
		for(int i=0;i<a.length;i++) {
			a[i]=r.nextInt(50); //r.nextInt(Boundary value==> 50) so it will print the values from 0 to 50
			
		}

		//below is the normal for loop to fetch the array values.
		//this is useful if we want to select a defined part of an array.
		//if we want to fetch the entire array value then we should use enhanced for loop instead of regular for loop.
//		for(int i=0;i<a.length;i++)
//		{
//			System.out.println(a[i]);
//		}
		
		//to print a array value
		try {
		System.out.println("The array requested array value is: "+ a[52]);
		}
		catch(ArrayIndexOutOfBoundsException e) {
			System.out.println("Error: The maximum length of the a[] is 49, please use appropriate index value");
		}
		
		System.out.println("===Enhanced For Loop===");
		
		for(int j : a)
			System.out.println("The value of j is: "+j);

	}

}


o/p:

Error: The maximum length of the a[] is 49, please use appropriate index value!
===Enhanced For Loop===
The value of j is: 10
The value of j is: 40
The value of j is: 21
The value of j is: 42
The value of j is: 8
The value of j is: 20
The value of j is: 44
The value of j is: 31
The value of j is: 10
The value of j is: 6
The value of j is: 15
The value of j is: 43
The value of j is: 45
The value of j is: 16
The value of j is: 30
The value of j is: 28
The value of j is: 13
The value of j is: 15
The value of j is: 24
The value of j is: 45
The value of j is: 1
The value of j is: 3
The value of j is: 47
The value of j is: 15
The value of j is: 32
The value of j is: 39
The value of j is: 6
The value of j is: 11
The value of j is: 31
The value of j is: 14
The value of j is: 22
The value of j is: 5
The value of j is: 24
The value of j is: 37
The value of j is: 2
The value of j is: 39
The value of j is: 0
The value of j is: 24
The value of j is: 3
The value of j is: 41
The value of j is: 4
The value of j is: 24
The value of j is: 0
The value of j is: 13
The value of j is: 19
The value of j is: 11
The value of j is: 27
The value of j is: 41
The value of j is: 44
The value of j is: 35

====================================================================================================================
2-Dimensional Array:
==================================



public class TwoDArray {

	public static void main(String[] args) {

		// int x[]=new int[4]; //Object creation initialization and then assignment.

		// Static assignment of array

		int x[] = { 1, 2, 3, 4 };
		int y[] = { 5, 6, 7, 8 };
		int z[] = { 9, 8, 7, 6 };

		int q[][] = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 8, 7, 6 }, };// 2-D Array initialization and assignment.

		System.out.println("======2-D Array======");
		
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++) {
				System.out.print(q[i][j] + " ");

			}
			System.out.println("");
		}
		
		System.out.println("======2-D Array||Enhanced For Loop======");
		
		for(int i[]:q) {
			
			for(int j:i) {
				
				System.out.print(j+ " ");
			}
			System.out.println("");
		}
		
		

	}

}



o/p:
======2-D Array======
1 2 3 4 
5 6 7 8 
9 8 7 6 
======2-D Array||Enhanced For Loop======
1 2 3 4 
5 6 7 8 
9 8 7 6 

====================================================================================================================
Jagged Array:
==================================
import java.util.Random;

public class JaggedArray {

	public static void main(String[] args) {

		// Static values assignment to an array.
		int q[][] = { { 1, 2, 3, 4 }, { 5, 6 }, { 9, 8, 7, 6, 8 } };// 2-D Array initialization and assignment.

		System.out.println("======2-D Array||Enhanced For Loop======");

		for (int i[] : q) {

			for (int j : i) {

				System.out.print(j + " ");
			}
			System.out.println("");
		}

		int k[][] = new int[3][];

		// in Jagged Array row size is always same but column size varies.

		k[0] = new int[4];
		k[1] = new int[2];
		k[2] = new int[5];

		Random r = new Random();

		for (int i = 0; i < 3; i++) {

			for (int j = 0; j < k[i].length; j++) {

				k[i][j] = r.nextInt(20);
			}

		}

		System.out.println("======2-D Jagged Array (Random Value (20))||Enhanced For Loop======");

		for (int o[] : k) {

			for (int p : o) {

				System.out.print(p + " ");

			}
			System.out.println("");
		}

	}

}

o/p:
======2-D Array||Enhanced For Loop======
1 2 3 4 
5 6 
9 8 7 6 8 
======2-D Jagged Array (Random Value (20))||Enhanced For Loop======
3 13 5 2 
10 1 
4 3 18 9 6 


====================================================================================================================
3-Dimensional Array:
==================================

public class ThreeDArray {

	public static void main(String[] args) {
		int a[]=new int[4];
		int b[][]=new int[4][4]; //2-D
		int c[][][]=new int[4][4][4]; //3-D
		
		for(int i=0;i<4;i++) {
			for(int j=0;j<4;j++) {
				for(int k=0;k<4;k++) {
					
					c[i][j][k]=i+j+k;
					
				}
				
			}
			
		}
		
		System.out.println("======3-D Array||Enhanced For Loop======");
		
		for(int i[][]:c) {
			for(int j[]:i) {
				for(int k:j)
					System.out.print(k+" ");
			}
		}

	}

}

o/p:
======3-D Array||Enhanced For Loop======
0 1 2 3 1 2 3 4 2 3 4 5 3 4 5 6 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 2 3 4 5 3 4 5 6 4 5 6 7 5 6 7 8 3 4 5 6 4 5 6 7 5 6 7 8 6 7 8 9 


====================================================================================================================
Variable Arguments VarArgs:
==================================
//VarArgs: this is an approach which we can use in java to define the arguments for which we don't know the incoming argument size
//Syntax: (String[] args) ==> (String ... args)
//if the method call in main() is matching with the signature of the Display.show() then it will execute the matching method, after that it will check the VarArgs.


public class VarArgs {

	public static void main(String[] args) {
		
		Display.show(5);
		Display.show(5,6);
		

	}
	
	public class Display {
		
		static void show(int ... a) {
			System.out.println("====Inside Show===");
			for(int i:a)
			
			System.out.println("The Value is : "+ i);
		}
		
		static void show(int a) {
					
			System.out.println("====Inside Show1===");
			System.out.println("The Value of a is : "+ a);
		}
		
	
	}

}

o/p:

====Inside Show1===
The Value of a is : 5
====Inside Show===
The Value is : 5
The Value is : 6

====================================================================================================================
Different ways to write main method:
====================================
//1st way:
public class Test {

	public static void main(String[] args) {
		
				

	}
	
//2nd way:
public class Test {

	 static public void main(String[] args) {
		
				

	}
	
//3rd way: --VarArgs
public class Test {

	 static public void main(String ... args) {
		
				

	}